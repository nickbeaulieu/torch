// -- AUTOGENERATED - DO NOT EDIT --

import { Token, Type } from './token';

import { Expr } from './expr';

export abstract class Stmt {}
export class Block extends Stmt {
  statements: Stmt[];
  constructor(statements: Stmt[]) { 
    super();
    this.statements = statements;
  }
}
export class Expression extends Stmt {
  expression: Expr;
  constructor(expression: Expr) { 
    super();
    this.expression = expression;
  }
}
export class Func extends Stmt {
  name: Token;
  params: Token[];
  body: Stmt[];
  type: Token;
  constructor(name: Token, params: Token[], body: Stmt[], type: Token) { 
    super();
    this.name = name;
    this.params = params;
    this.body = body;
    this.type = type;
  }
}
export class If extends Stmt {
  condition: Expr;
  thenBranch: Stmt;
  elseBranch: Stmt | null;
  constructor(condition: Expr, thenBranch: Stmt, elseBranch: Stmt | null) { 
    super();
    this.condition = condition;
    this.thenBranch = thenBranch;
    this.elseBranch = elseBranch;
  }
}
export class Return extends Stmt {
  keyword: Token;
  value: Expr | null;
  constructor(keyword: Token, value: Expr | null) { 
    super();
    this.keyword = keyword;
    this.value = value;
  }
}
export class Let extends Stmt {
  name: Token;
  initializer: Expr;
  type: Token;
  constructor(name: Token, initializer: Expr, type: Token) { 
    super();
    this.name = name;
    this.initializer = initializer;
    this.type = type;
  }
}
export class While extends Stmt {
  condition: Expr;
  body: Stmt;
  constructor(condition: Expr, body: Stmt) { 
    super();
    this.condition = condition;
    this.body = body;
  }
}
