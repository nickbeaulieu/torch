function defineAst(start: string, baseName: string, definitions: string[]) {
  let output = start

  output += `export abstract class ${baseName} {}\n`

  for (let definition of definitions) {
    let [className, fields] = definition.split('=').map((s) => s.trim())
    output += defineType(baseName, className, fields)
  }

  Bun.write(`src/${baseName.toLowerCase()}.ts`, output)
}

function defineType(baseName: string, className: string, fieldList: string) {
  let output = ''
  output += `export class ${className} extends ${baseName} {\n`
  let fields = fieldList.split(', ').map((s) => s.trim())
  for (let field of fields) {
    output += `  ${field};\n`
  }
  output += '  constructor('
  output += fields.join(', ')
  output += ') { \n    super();\n'
  for (let field of fields) {
    let name = field.split(':')[0].trim()
    output += `    this.${name} = ${name};\n`
  }
  output += '  }\n'
  output += '}\n'
  return output
}

const AUTOGENERATED = '// -- AUTOGENERATED - DO NOT EDIT --\n\n'
const TOKEN = `import { Token, Type } from './token';\n\n`
const EXPR = `import { Expr } from './expr';\n\n`

defineAst(AUTOGENERATED + TOKEN, 'Expr', [
  'Assign   = name: Token | ArrayAccess, value: Expr',
  'Binary   = left: Expr, operator: Token, right: Expr',
  'Call     = callee: Expr, paren: Token, args: Expr[]',
  'Grouping = expression: Expr',
  'Literal  = value: any, type: "string" | "boolean" | "number" | "null"',
  'ArrayLiteral = elements: Expr[], type: Type, size: Expr',
  'Logical  = left: Expr, operator: Token, right: Expr',
  'Unary    = operator: Token, right: Expr',
  'Variable = name: Token',
  'ArrayAccess = name: Token, index: Expr',
])

defineAst(AUTOGENERATED + TOKEN + EXPR, 'Stmt', [
  'Block = statements: Stmt[]',
  'Expression = expression: Expr',
  'Func = name: Token, params: Token[], body: Stmt[], type: Token',
  'If = condition: Expr, thenBranch: Stmt, elseBranch: Stmt | null',
  'Return = keyword: Token, value: Expr | null',
  'Let = name: Token, initializer: Expr, type: Token',
  'While = condition: Expr, body: Stmt',
])
