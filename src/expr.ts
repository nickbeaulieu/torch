// -- AUTOGENERATED - DO NOT EDIT --

import { Token } from './token';

export abstract class Expr {
  abstract accept<R>(visitor: Visitor<R>): R;
}
export interface Visitor<R> {
  visit(expr: Expr): R;
}
export class Assign extends Expr {
  name: Token;
  value: Expr;
  constructor(name: Token, value: Expr) { 
    super();
    this.name = name;
    this.value = value;
  }
  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit(this);
  }
}
export class Binary extends Expr {
  left: Expr;
  operator: Token;
  right: Expr;
  constructor(left: Expr, operator: Token, right: Expr) { 
    super();
    this.left = left;
    this.operator = operator;
    this.right = right;
  }
  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit(this);
  }
}
export class Call extends Expr {
  callee: Expr;
  paren: Token;
  args: Expr[];
  constructor(callee: Expr, paren: Token, args: Expr[]) { 
    super();
    this.callee = callee;
    this.paren = paren;
    this.args = args;
  }
  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit(this);
  }
}
export class Grouping extends Expr {
  expression: Expr;
  constructor(expression: Expr) { 
    super();
    this.expression = expression;
  }
  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit(this);
  }
}
export class Literal extends Expr {
  value: any;
  type: "string" | "boolean" | "number" | "null";
  constructor(value: any, type: "string" | "boolean" | "number" | "null") { 
    super();
    this.value = value;
    this.type = type;
  }
  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit(this);
  }
}
export class Logical extends Expr {
  left: Expr;
  operator: Token;
  right: Expr;
  constructor(left: Expr, operator: Token, right: Expr) { 
    super();
    this.left = left;
    this.operator = operator;
    this.right = right;
  }
  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit(this);
  }
}
export class Unary extends Expr {
  operator: Token;
  right: Expr;
  constructor(operator: Token, right: Expr) { 
    super();
    this.operator = operator;
    this.right = right;
  }
  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit(this);
  }
}
export class Variable extends Expr {
  name: Token;
  constructor(name: Token) { 
    super();
    this.name = name;
  }
  accept<R>(visitor: Visitor<R>): R {
    return visitor.visit(this);
  }
}
